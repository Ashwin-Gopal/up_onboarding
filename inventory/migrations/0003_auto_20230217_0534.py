# Generated by Django 4.1.6 on 2023-02-17 05:34

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType

CustomPermissionSet = {
    'superAdmin': [
        {
            "name": "Can view merchant",
            "codename": "view_merchant"
        },
        {
            "name": "Can add merchant",
            "codename": "add_merchant"
        },
        {
            "name": "Can edit merchant",
            "codename": "edit_merchant"
        },
        {
            "name": "Can list merchants",
            "codename": "list_merchants"
        },
        {
            "name": "Can view inventory",
            "codename": "view_inventory"
        },
        {
            "name": "Can add inventory items",
            "codename": "add_inventory_items"
        },
        {
            "name": "Can edit inventory items",
            "codename": "edit_inventory_items"
        },
        {
            "name": "Can list inventory items",
            "codename": "list_inventory_items"
        },
        {
            "name": "Can view store",
            "codename": "view_store"
        },
        {
            "name": "Can add store",
            "codename": "add_store"
        },
        {
            "name": "Can edit store",
            "codename": "edit_store"
        },
        {
            "name": "Can list stores",
            "codename": "list_stores"
        }
    ],
    'merchantOwner': [
        {
            "name": "Can view merchant",
            "codename": "view_merchant"
        },
        {
            "name": "Can list merchants",
            "codename": "list_merchants"
        },
        {
            "name": "Can view inventory",
            "codename": "view_inventory"
        },
        {
            "name": "Can list inventory items",
            "codename": "list_inventory_items"
        },
        {
            "name": "Can view store",
            "codename": "view_store"
        },
        {
            "name": "Can add store",
            "codename": "add_store"
        },
        {
            "name": "Can edit store",
            "codename": "edit_store"
        },
        {
            "name": "Can list stores",
            "codename": "list_stores"
        }
    ],
    'user': [
        {
            "name": "Can view merchant",
            "codename": "view_merchant"
        },
        {
            "name": "Can list merchants",
            "codename": "list_merchants"
        },
        {
            "name": "Can view inventory",
            "codename": "view_inventory"
        },
        {
            "name": "Can list inventory items",
            "codename": "list_inventory_items"
        },
        {
            "name": "Can view store",
            "codename": "view_store"
        },
        {
            "name": "Can list stores",
            "codename": "list_stores"
        }
    ]
}


def reverse_group_permission(apps, schema_editor):
    user_model_object = apps.get_model("users", "OnboardingUser")
    content_type_object = ContentType.objects.get_for_model(user_model_object)
    for key, value in CustomPermissionSet.items():
        group_object = Group.objects.get(name=key)
        for each_permission in CustomPermissionSet[key]:
            try:
                permission = Permission.objects.get(codename=each_permission['codename'], name=each_permission['name'],
                                                    content_type=content_type_object)
                group_object.permissions.remove(permission)
            except Permission.DoesNotExist:
                pass


def migrate_group_permission(apps, schema_editor):
    user_model_object = apps.get_model("users", "OnboardingUser")
    content_type_object = ContentType.objects.get_for_model(user_model_object)
    role_model_object = apps.get_model("users", "Role")
    role_objects = role_model_object.objects.all()
    for each_role_object in role_objects:
        group_object, created = Group.objects.get_or_create(name=each_role_object.name)
        for each_permission in CustomPermissionSet.get(group_object.name, []):
            permission_obj = Permission.objects.filter(
                codename=each_permission['codename'],
                name=each_permission['name']
            ).first()
            if not permission_obj:
                permission_obj = Permission.objects.create(
                    codename=each_permission['codename'],
                    name=each_permission['name'],
                    content_type=content_type_object
                )
            group_object.permissions.add(permission_obj)


class Migration(migrations.Migration):
    dependencies = [
        ('inventory', '0002_remove_storeitemprice_title'),
    ]

    operations = [
        migrations.RunPython(migrate_group_permission, reverse_code=reverse_group_permission)
    ]
